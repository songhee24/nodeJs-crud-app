{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Fake Api CRUD Server by songhee24",
        "description": "The server was created to support students who need to hone their skills in working with asynchronous requests",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "host": "fake-api-backend.herokuapp.com",
    "basePath": "/",
    "tags": [
        {
            "name": "App Url",
            "description": "Base info about App"
        }
    ],
    "schemes": ["https"],
    "consumes": ["application/json"],
    "produces": ["application/json"],
    "paths": {
        "/users/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "ID of user that we want to find",
                    "type": "integer"
                }
            ],
            "delete": {
                "summary": "Delete user with given ID",
                "tags": ["Users"],
                "responses": {
                    "200": {
                        "description": "User is deleted",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update user with give ID",
                "tags": ["Users"],
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "User with new values of properties",
                        "schema": {
                            "$ref": "#/definitions/updateUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User is updated",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": ["Users"],
                "summary": "Get all users in system",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    }
                }
            },
            "post": {
                "tags": ["Users"],
                "description": "Create new user in system",
                "parameters": [
                    {
                        "name": "user",
                        "in": "body",
                        "description": "User that we want to create",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "produces": ["application/json"],
                "responses": {
                    "200": {
                        "description": "New user is created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "User": {
            "required": ["name", "email"],
            "properties": {
                "name": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "uniqueItems": true
                }
            }
        },
        "Users": {
            "type": "array",
            "$ref": "#/definitions/User"
        },
        "updateUser": {
            "required": ["name", "email"],
            "properties": {
                "name": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "uniqueItems": true
                }
            }
        }
    }
}
